// üì¶ Lista de sucursales disponibles
const sucursales = [
    "Cuidad Quesada", "Sucursal NG", "Florencia", "Alajuela", "Heredia", "San Jos√©", "Cartago", "Tilar√°n", "Nicoya",
    "Zarcero", "San Ram√≥n", "Orotina", "Naranjo", "Grecia", "La Tigra", "Fortuna", "Guatuso", "Santa Rosa", "Aguas Zarcas",
    "Venecia", "Pital", "Puerto Viejo", "Guapiles"
];

// üì¶ Cargar las sucursales en el <select>
function cargarSucursales() {
    const sucursalEnvio = document.getElementById('sucursal-envio');
    sucursales.forEach(sucursal => {
        const option = document.createElement('option');
        option.value = sucursal;
        option.textContent = sucursal;
        sucursalEnvio.appendChild(option);
    });
}

// üì¶ Mostrar el contenido del carrito
function mostrarCarrito() {
    const carrito = JSON.parse(localStorage.getItem('carrito')) || [];
    const carritoContainer = document.getElementById('carrito-container');
    carritoContainer.innerHTML = '';

    let total = 0;

    carrito.forEach(producto => {
        const productRow = document.createElement('div');
        productRow.className = 'carrito-item';

        const subtotal = producto.precio * producto.cantidad;
        total += subtotal;

        let imagenSrc = producto.imagen;
        if (imagenSrc?.startsWith('/img')) {
            imagenSrc = imagenSrc.replace('/img', 'img');
        }

        productRow.innerHTML = `
            <img src="${imagenSrc}" alt="${producto.nombre}">
            <div class="carrito-item-info">
                <h4>${producto.nombre}</h4>
                <p>${producto.descripcion}</p>
                <p><strong>Precio: ‚Ç°${producto.precio}</strong></p>
                <p><strong>Cantidad: ${producto.cantidad}</strong></p>
                <p><strong>Subtotal: ‚Ç°${subtotal}</strong></p>
            </div>
            <button class="btn-eliminar" data-product-id="${producto.id}">Eliminar</button>
        `;

        carritoContainer.appendChild(productRow);
    });

    const totalRow = document.createElement('div');
    totalRow.className = 'carrito-total';
    totalRow.innerHTML = `Total: ‚Ç°${total}`;
    carritoContainer.appendChild(totalRow);

    document.querySelectorAll('.btn-eliminar').forEach(button => {
        button.addEventListener('click', (e) => {
            const productId = e.target.dataset.productId;
            eliminarDelCarrito(productId);
        });
    });
}

// üì¶ Eliminar un producto del carrito
function eliminarDelCarrito(productId) {
    let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
    const productoEnCarrito = carrito.find(producto => producto.id == productId);

    if (productoEnCarrito) {
        if (productoEnCarrito.cantidad > 1) {
            productoEnCarrito.cantidad -= 1;
        } else {
            carrito = carrito.filter(producto => producto.id != productId);
        }

        localStorage.setItem('carrito', JSON.stringify(carrito));
        mostrarCarrito();
        actualizarCarritoNavbar();
    }
}

// üì¶ Inicializar el carrito y sucursales al cargar la p√°gina
document.addEventListener('DOMContentLoaded', () => {
    mostrarCarrito();
    cargarSucursales();
});

// üì¶ Manejo del env√≠o del formulario

document.getElementById('checkout-form').addEventListener('submit', async function (e) {
    e.preventDefault();

    const nombreCompleto = document.getElementById('nombre-completo').value;
    const sucursalEnvio = document.getElementById('sucursal-envio').value;
    const comprobantePago = document.getElementById('comprobante-pago').files[0];

    const carrito = JSON.parse(localStorage.getItem('carrito')) || [];
    if (carrito.length === 0) {
        alert("‚ùå No hay productos en el carrito.");
        return;
    }

    const productosValidos = carrito.filter(producto =>
        producto.id && producto.nombre && !isNaN(Number(producto.precio)) && !isNaN(Number(producto.cantidad))
    );

    if (productosValidos.length === 0) {
        alert("‚ùå Hay productos inv√°lidos en el carrito. Por favor elim√≠nalos.");
        return;
    }

    const total = productosValidos.reduce((acc, producto) => acc + (Number(producto.precio) * Number(producto.cantidad)), 0);

    const pedido = {
        nombreCliente: nombreCompleto,
        sucursal: sucursalEnvio,
        productos: productosValidos.map(producto => ({
             id: producto.id,
            nombre: producto.nombre,
            precio: Number(producto.precio),
            cantidad: Number(producto.cantidad),
            imagen: producto.imagen || ''
            }))
,
        total
    };

    // üîê Validaci√≥n del reCAPTCHA
    if (typeof grecaptcha === 'undefined') {
        alert("‚ùå Error al cargar reCAPTCHA. Verific√° tu conexi√≥n.");
        return;
    }

   // Validaci√≥n del token CAPTCHA
const captchaToken = grecaptcha.getResponse();
if (!captchaToken || captchaToken.length < 30) {
    alert("‚ö†Ô∏è Por favor, resolv√© el CAPTCHA antes de enviar.");
    grecaptcha.reset(); // üîÅ RESETEA SI ES INV√ÅLIDO
    return;
}


    console.log("üß† CAPTCHA TOKEN:", captchaToken);

    const formData = new FormData();
    formData.append('nombreCliente', pedido.nombreCliente);
    formData.append('sucursal', pedido.sucursal);
    formData.append('productos', JSON.stringify(pedido.productos));
    formData.append('total', pedido.total);
    formData.append('comprobantePago', comprobantePago);
    formData.append("g-recaptcha-response", captchaToken);

    // üöÄ Enviar datos al backend
    try {
        const response = await fetch("https://coocishop.onrender.com/api/pedidos", {
            method: "POST",
            body: formData
        });

        let data;
        try {
            data = await response.json();
        } catch (err) {
            data = null;
        }

        if (response.ok) {
            mostrarNotificacion("success", "‚úÖ Pedido enviado con √©xito.");
            localStorage.removeItem('carrito');
            mostrarCarrito();
            document.getElementById('checkout-form').reset();
            grecaptcha.reset(); // üîÅ RESETEA TRAS √âXITO
        } else {
            alert(`‚ùå Error al enviar pedido: ${(data && data.error) || 'Error desconocido'}`);
            grecaptcha.reset(); // üîÅ RESETEA SI EL BACKEND RECHAZA
        }
        

        actualizarCarritoNavbar();
    } catch (error) {
        console.error("‚ùå Error al enviar pedido:", error);
        alert("‚ö†Ô∏è No se pudo completar el pedido en este momento. Int√©ntalo de nuevo m√°s tarde.");
        grecaptcha.reset();
    }

    actualizarCarritoNavbar();
});

// üìå Actualizar el contador del carrito en el navbar
function actualizarCarritoNavbar() {
    let carrito = JSON.parse(localStorage.getItem("carrito")) || [];
    let contadorCarrito = document.getElementById("cart-count");
    if (contadorCarrito) {
        contadorCarrito.textContent = carrito.reduce((total, item) => total + item.cantidad, 0);
    }
}

// üìå Crear el contenedor de notificaciones si no existe
if (!document.getElementById("toast-container")) {
    document.body.insertAdjacentHTML("beforeend", '<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>');
}

// üì¶ Mostrar una notificaci√≥n visual
function mostrarNotificacion(tipo, mensaje) {
    const toastContainer = document.getElementById("toast-container");
    if (!toastContainer) return;

    const toast = document.createElement("div");
    toast.className = `toast align-items-center text-bg-${tipo} border-0 show`;
    toast.role = "alert";
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">${mensaje}</div>
            <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    `;
    toastContainer.appendChild(toast);

    setTimeout(() => toast.remove(), 3000);
}

// üìå Asegurar contenedor de notificaciones
if (!document.getElementById("toast-container")) {
    document.body.insertAdjacentHTML(
        "beforeend",
        `<div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>`
    );
}
// üì¶ Inicializar reCAPTCHA al cargar la p√°gina
let captchaWidgetId;

function onLoadRecaptcha() {
  captchaWidgetId = grecaptcha.render('captcha-container', {
    sitekey: '6LeB7kcrAAAAAAqp03o7nYZt79W7KNFwULHdHufF'
  });
}
